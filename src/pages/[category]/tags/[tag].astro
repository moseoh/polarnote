---
import { getCollection } from 'astro:content';
import MainLayout from '../../../layouts/MainLayout.astro';
import Header from '../../../components/Header.astro';
import PostList from '../../../components/PostList.astro';
import Sidebar from '../../../components/Sidebar.astro';
import type { CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('posts', ({ data }) => {
    return data.draft !== true;
  });

  // 카테고리별로 태그 조합 생성
  const paths = [];
  
  // 모든 카테고리 추출 + 'all' 추가
  const categories = [
    'all', // 전체 카테고리
    ...new Set(
      posts
        .map((post: CollectionEntry<'posts'>) => post.data.category)
        .filter(Boolean) as string[]
    )
  ];

  for (const category of categories) {
    // 해당 카테고리의 포스트들만 필터링 ('all'인 경우 전체 포스트)
    const categoryPosts = category === 'all' 
      ? posts 
      : posts.filter(post => post.data.category === category);
    
    // 해당 카테고리에서 사용된 모든 태그 추출
    const categoryTags = [...new Set(categoryPosts.flatMap(post => post.data.tags))];
    
    // 카테고리별 태그 경로 생성
    for (const tag of categoryTags) {
      paths.push({
        params: { 
          category: category.toLowerCase(), 
          tag 
        },
        props: { 
          category, 
          tag 
        },
      });
    }
  }

  return paths;
}

const { category, tag } = Astro.props;

const posts = await getCollection('posts', ({ data }) => {
  return data.draft !== true;
});

const sortedPosts = posts.sort(
  (a: CollectionEntry<'posts'>, b: CollectionEntry<'posts'>) =>
    b.data.createdAt.valueOf() - a.data.createdAt.valueOf()
);

// 모든 카테고리 추출 및 '전체' 추가
const allCategories = [
  '전체',
  ...new Set(
    posts
      .map((post: CollectionEntry<'posts'>) => post.data.category)
      .filter(Boolean) as string[]
  ),
];

// 카테고리와 태그로 이중 필터링 ('all'인 경우 태그만 필터링)
const filteredPosts = sortedPosts.filter((post: CollectionEntry<'posts'>) => {
  if (category === 'all') {
    return post.data.tags.includes(tag);
  }
  return post.data.category === category && post.data.tags.includes(tag);
});
---

<MainLayout title={`${tag} in ${category} - Toss Tech Blog`}>
  <Header />
  <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <div class="mb-8">
      <h1 class="text-3xl font-bold">#{tag}</h1>
      <p class="text-gray-600 mt-2">
        {category === 'all' ? `전체에서 ${filteredPosts.length}개의 포스트` : `${category}에서 ${filteredPosts.length}개의 포스트`}
      </p>
    </div>
    <div
      class="grid grid-cols-1 lg:grid-cols-[1fr_auto] gap-12 items-start"
    >
      <PostList
        posts={filteredPosts}
        categories={allCategories}
        currentCategory={category === 'all' ? '전체' : category}
      />
              <Sidebar posts={sortedPosts} currentCategory={category === 'all' ? '전체' : category} currentTag={tag} />
    </div>
  </main>
</MainLayout>