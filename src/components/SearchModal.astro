---
import { Search } from '@lucide/astro';
---

<!-- 검색 모달 -->
<div id="search-modal" class="hidden fixed inset-0 z-50 overflow-y-auto flex items-start justify-center p-4 pt-20 sm:pt-28 text-center" aria-labelledby="modal-title" role="dialog" aria-modal="true">
  
  <!-- 백드롭 -->
  <div class="fixed inset-0 bg-gray-900 bg-opacity-20 backdrop-blur transition-all duration-300" id="search-backdrop"></div>
  
  <!-- 모달 컨테이너 -->
  <div class="relative transform overflow-hidden rounded-xl bg-white text-left shadow-2xl transition-all sm:w-full sm:max-w-2xl search-modal-enter border border-gray-200">
    
    <!-- 검색 입력 영역 -->
    <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
      <div class="flex items-center space-x-3 pb-4 border-b border-gray-200">
        <Search class="h-5 w-5 text-gray-400" />
        <input
          id="search-modal-input"
          type="text"
          placeholder="검색어를 입력하세요..."
          class="flex-1 text-lg border-none outline-none placeholder-gray-400"
          autocomplete="off"
        />
        <div class="flex items-center space-x-1 text-xs text-gray-400">
          <kbd class="px-1.5 py-0.5 text-xs font-semibold text-gray-600 bg-gray-100 border border-gray-200 rounded">ESC</kbd>
          <span>닫기</span>
        </div>
      </div>
    </div>

    <!-- 검색 결과 영역 -->
    <div class="bg-gray-50 px-4 py-3 sm:px-6">
      
      <!-- 로딩 상태 -->
      <div id="search-modal-loading" class="hidden flex items-center justify-center py-8 text-gray-500">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500"></div>
        <span class="ml-3">검색 중...</span>
      </div>

      <!-- 검색 결과 리스트 -->
      <div id="search-modal-results" class="max-h-96 overflow-y-auto">
        <!-- 검색 결과가 여기에 표시됩니다 -->
      </div>

      <!-- 빈 결과 -->
      <div id="search-modal-empty" class="hidden text-center py-8 text-gray-500">
        <Search class="h-12 w-12 mx-auto mb-4 text-gray-300" />
        <p class="text-lg font-medium">검색 결과가 없습니다</p>
        <p class="text-sm">다른 키워드로 시도해보세요</p>
      </div>

      <!-- 기본 상태 (검색어 입력 전) -->
      <div id="search-modal-default" class="text-center py-8 text-gray-500">
        <Search class="h-12 w-12 mx-auto mb-4 text-gray-300" />
        <p class="text-lg font-medium">무엇을 찾고 계신가요?</p>
        <p class="text-sm">검색어를 입력해주세요</p>
      </div>

    </div>

    <!-- 푸터 (키보드 힌트) -->
    <div class="bg-gray-50 px-4 py-3 sm:px-6 border-t border-gray-200">
      <div class="flex items-center justify-between text-xs text-gray-500">
        <div class="flex items-center space-x-4">
          <div class="flex items-center space-x-1">
            <kbd class="px-1.5 py-0.5 font-semibold bg-gray-200 border border-gray-300 rounded">↑</kbd>
            <kbd class="px-1.5 py-0.5 font-semibold bg-gray-200 border border-gray-300 rounded">↓</kbd>
            <span>탐색</span>
          </div>
          <div class="flex items-center space-x-1">
            <kbd class="px-1.5 py-0.5 font-semibold bg-gray-200 border border-gray-300 rounded">Enter</kbd>
            <span>선택</span>
          </div>
        </div>
      </div>
    </div>

  </div>
</div>

<style>
  .search-modal-enter {
    animation: modalSlideIn 0.1s ease-out;
  }
  
  @keyframes modalSlideIn {
    from {
      opacity: 0;
      transform: translateY(-2rem) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
  
  /* 모달이 숨겨질 때의 애니메이션
  #search-modal.modal-closing .search-modal-enter {
    animation: modalSlideOut 0.1s ease-in;
  }
  
  @keyframes modalSlideOut {
    from {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
    to {
      opacity: 0;
      transform: translateY(-2rem) scale(0.95);
    }
  } */
</style>

<script>
  // 검색 모달 관련 모든 로직을 여기에 포함
  
  // Pagefind 검색 인스턴스
  let pagefind: any = null;

  // Pagefind 초기화
  async function initPagefind() {
    if (!pagefind) {
      try {
        // @ts-ignore - Pagefind는 빌드 시 생성되는 파일입니다
        pagefind = await import('/pagefind/pagefind.js');
        await pagefind.init();
      } catch (error) {
        console.error('Pagefind 초기화 실패:', error);
      }
    }
    return pagefind;
  }

  // OS 감지
  function detectOS() {
    const platform = navigator.platform.toLowerCase();
    const userAgent = navigator.userAgent.toLowerCase();
    
    if (platform.includes('mac') || userAgent.includes('mac')) {
      return 'mac';
    }
    return 'other';
  }

  // 모달 열기/닫기 함수들을 전역에 노출
  declare global {
    interface Window {
      openSearchModal: () => void;
      closeSearchModal: () => void;
    }
  }

  // 모달 열기
  function openSearchModal() {
    const modal = document.getElementById('search-modal');
    const input = document.getElementById('search-modal-input') as HTMLInputElement;
    
    if (modal && input) {
      modal.classList.remove('hidden');
      // 약간의 지연 후 포커스 (애니메이션 완료 후)
      setTimeout(() => {
        input.focus();
      }, 100);
      
      // body 스크롤 방지
      document.body.style.overflow = 'hidden';
    }
  }

  // 모달 닫기
  function closeSearchModal() {
    const modal = document.getElementById('search-modal');
    const input = document.getElementById('search-modal-input') as HTMLInputElement;
    
    if (modal && input) {
      // 닫기 애니메이션 추가
      modal.classList.add('modal-closing');
      
      // 애니메이션 완료 후 실제로 숨기기
      setTimeout(() => {
        modal.classList.add('hidden');
        modal.classList.remove('modal-closing');
        input.value = '';
        document.body.style.overflow = '';
        
        // 상태 초기화
        showDefaultState();
      }, 200);
    }
  }

  // 전역에 함수 노출
  window.openSearchModal = openSearchModal;
  window.closeSearchModal = closeSearchModal;

  // 검색 상태 관리
  function showDefaultState() {
    document.getElementById('search-modal-default')?.classList.remove('hidden');
    document.getElementById('search-modal-loading')?.classList.add('hidden');
    document.getElementById('search-modal-results')?.classList.add('hidden');
    document.getElementById('search-modal-empty')?.classList.add('hidden');
  }

  function showLoadingState() {
    document.getElementById('search-modal-default')?.classList.add('hidden');
    document.getElementById('search-modal-loading')?.classList.remove('hidden');
    document.getElementById('search-modal-results')?.classList.add('hidden');
    document.getElementById('search-modal-empty')?.classList.add('hidden');
  }

  function showResultsState() {
    document.getElementById('search-modal-default')?.classList.add('hidden');
    document.getElementById('search-modal-loading')?.classList.add('hidden');
    document.getElementById('search-modal-results')?.classList.remove('hidden');
    document.getElementById('search-modal-empty')?.classList.add('hidden');
  }

  function showEmptyState() {
    document.getElementById('search-modal-default')?.classList.add('hidden');
    document.getElementById('search-modal-loading')?.classList.add('hidden');
    document.getElementById('search-modal-results')?.classList.add('hidden');
    document.getElementById('search-modal-empty')?.classList.remove('hidden');
  }

  // 검색 기능 (Pagefind 사용)
  let searchTimeout: any;
  let selectedIndex = -1;
  
  async function performSearch(query: string) {
    const resultsContainer = document.getElementById('search-modal-results');
    
    if (!resultsContainer) return;
    
    if (query.trim().length < 2) {
      showDefaultState();
      return;
    }
    
    // 로딩 상태 표시
    showLoadingState();
    selectedIndex = -1;
    
    try {
      const pagefindInstance = await initPagefind();
      if (!pagefindInstance) {
        throw new Error('Pagefind를 초기화할 수 없습니다.');
      }

      const search = await pagefindInstance.search(query);
      
      if (search.results.length === 0) {
        showEmptyState();
      } else {
        // 결과 데이터를 가져와서 렌더링
        const resultsData = await Promise.all(
          search.results.slice(0, 10).map(async (result: any) => {
            return await result.data();
          })
        );

        resultsContainer.innerHTML = resultsData.map((data: any, index: number) => {
          const title = data.meta?.title || '제목 없음';
          const tags = data.meta?.tags ? data.meta.tags.split(' ').filter((tag: string) => tag.trim()) : [];
          // const content = data.excerpt || data.content?.substring(0, 100) + '...' || '';
          const content = data.excerpt || data.content || '';

          
          return `
             <div class="search-result-item group cursor-pointer rounded-lg p-4 hover:bg-white transition-colors ${index === selectedIndex ? 'bg-white shadow-sm selected' : 'bg-transparent'}" data-url="${data.url}" data-index="${index}">
               <div class="flex items-start space-x-3">
                 <div class="flex-shrink-0 w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                   <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                   </svg>
                 </div>
                 <div class="flex-1 min-w-0 space-y-2">
                   <!-- Title -->
                   <div>
                     <h3 class="text-sm font-medium text-gray-900 group-hover:text-blue-600 transition-colors">${title}</h3>
                   </div>
                   
                   <!-- Tags -->
                   ${tags.length > 0 ? `
                     <div>
                       <div class="flex flex-wrap gap-1 mt-1">
                         ${tags.map((tag: string) => `<span class="inline-flex items-center px-2 py-0.5 rounded text-xs bg-blue-50 text-blue-700 border border-blue-200">${tag}</span>`).join('')}
                       </div>
                     </div>
                   ` : ''}
                   
                   <!-- Content -->
                   <div>
                     <p class="text-sm text-gray-600 mt-1">${content}</p>
                   </div>
                 </div>
               </div>
             </div>
          `;
        }).join('');

        showResultsState();
        
        // 클릭 이벤트 등록
        resultsContainer.querySelectorAll('.search-result-item').forEach((item, index) => {
          item.addEventListener('click', () => {
            const url = item.getAttribute('data-url');
            if (url) {
              window.location.href = url;
            }
          });
        });
      }
    } catch (error) {
      console.error('검색 오류:', error);
      showEmptyState();
    }
  }

  // 키보드 네비게이션
  function updateSelection() {
    const items = document.querySelectorAll('.search-result-item');
    items.forEach((item, index) => {
      if (index === selectedIndex) {
        item.classList.add('bg-white', 'shadow-sm', 'selected');
        item.classList.remove('bg-transparent');
        item.scrollIntoView({ block: 'nearest' });
      } else {
        item.classList.remove('bg-white', 'shadow-sm', 'selected');
        item.classList.add('bg-transparent');
      }
    });
  }

  function selectResult() {
    const selectedItem = document.querySelector(`[data-index="${selectedIndex}"]`);
    if (selectedItem) {
      const url = selectedItem.getAttribute('data-url');
      if (url) {
        window.location.href = url;
      }
    }
  }

  // 전역 이벤트 리스너 플래그
  let eventListenersAdded = false;

  // 이벤트 리스너 설정
  function setupSearchModalEventListeners() {
    const searchInput = document.getElementById('search-modal-input') as HTMLInputElement;
    const searchModal = document.getElementById('search-modal');
    const searchBackdrop = document.getElementById('search-backdrop');
    
    if (!searchInput || !searchModal || !searchBackdrop) {
      console.warn('검색 모달 요소를 찾을 수 없습니다.');
      return;
    }

    // 백드롭 클릭으로 닫기
    searchBackdrop.addEventListener('click', closeSearchModal);

    // 검색 입력 이벤트
    searchInput.addEventListener('input', (e) => {
      const query = (e.target as HTMLInputElement).value;
      
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        performSearch(query);
      }, 300);
    });
    
    // 전역 키보드 이벤트 (한 번만 등록)
    if (!eventListenersAdded) {
      document.addEventListener('keydown', (e) => {
        const os = detectOS();
        const shortcutKey = os === 'mac' ? e.metaKey : e.ctrlKey;
        
        // Cmd+K / Ctrl+K로 모달 열기 (항상 체크)
        if (shortcutKey && e.key.toLowerCase() === 'k') {
          e.preventDefault();
          const modal = document.getElementById('search-modal');
          if(modal?.classList.contains('hidden')) {
            openSearchModal();
          } else {
            closeSearchModal();
          }
          return;
        }
        
        // 모달이 열려있을 때만 작동하는 키들
        const searchModal = document.getElementById('search-modal');
        if (searchModal && !searchModal.classList.contains('hidden')) {
          switch (e.key) {
            case 'Escape':
              e.preventDefault();
              closeSearchModal();
              break;
              
            case 'ArrowDown':
              e.preventDefault();
              const maxIndex = document.querySelectorAll('.search-result-item').length - 1;
              selectedIndex = Math.min(selectedIndex + 1, maxIndex);
              updateSelection();
              break;
              
            case 'ArrowUp':
              e.preventDefault();
              selectedIndex = Math.max(selectedIndex - 1, -1);
              updateSelection();
              break;
              
            case 'Enter':
              e.preventDefault();
              if (selectedIndex >= 0) {
                selectResult();
              }
              break;
          }
        }
      });
      
      eventListenersAdded = true;
    }
  }

  // 검색 모달 초기화
  function initializeSearchModal() {
    console.log('검색 모달 초기화 중...', location.pathname);
    setupSearchModalEventListeners();
  }

  // 즉시 실행 (스크립트가 로드되는 즉시)
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeSearchModal);
  } else {
    // 이미 DOM이 로드된 경우 즉시 실행
    initializeSearchModal();
  }

  // Astro 페이지 전환 시에도 다시 초기화
  document.addEventListener('astro:page-load', initializeSearchModal);
</script>
